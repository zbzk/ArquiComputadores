FELIPE VALENCIA TREJOS
1088301210

Ejercicio 1 

Este taller consiste en mejorar las habilidades de los conceptos aprendidos en clase.


1. Implemente en VHDL un FlipFlop de 1bit, con entradas D, Reset, CLK, y una salida Dout.
		____________
D-------|		   |	
		|		   |	
RST-----|		   |_______Dout	
		|		   |
CLK-----|>		   |
		|__________|
Respecto a este punto queda por fuera del taller ya que algunos dicen no haber trabajo
con VHDL, les dare algunos ejemplos para que se asocien al lenguaje como tal.



2. Escriba los 4 principios de diseño de hardware aprendidos en clase.

1er Principio: La simplicidad favorece la regularidad.
2do Principio: Entre mas pequeño mas rapido.
3er Principio: Hacer el caso comun mas rapido.
4to Principio: Buenos diseños demandan grandes compromisos.


3. Convertir a instrucciones de bajo nivel.

int x=0;
int y =8;
int z = 1;

y=x+3;
z=z+3;
x=(x-z)+(3+y);

R/: 

op  rd     op3   Rs1  i ___8____  Rs2
add %g0, 0, %l1;
10 10001 000000 00000 1 00000000 00000

add %g0, 8, %l2;
10 10010 000000 00000 1 00000000 01000

add %g0, 1, %l3;
10 10011 000000 00000 1 00000000 00001

add %l1, 3, %l2;
10 10010 000000 10001 1 00000000 00011

add %l3, 3, %l3;
10 10011 000000 10011 1 00000000 00011
    
sub %l1, %l3, %l3;
10 10011 000100 10001 0 00000000 10011

add %l2, 3, %l2;
10 10010 000000 10010 1 00000000 00011

add %l2, %l3, %l1;
10 10001 000000 10010 0 00000000 10011


4. Usar el ld, y st.
a)%l0           %l1  
    a[4]= a[2]+x;

     ld %l0, (2*4), %l2;
     add %l2, %l1, %l2;
     st %l2, %l0, (4*4);

b)%l0
    y[0] = y[40]+13;
    
    ld %l0, (40*4), %l1;
    add %l1, 13, %l1;
    st %l1, (0*4), %l0;

5. Convertir a lenguaje de maquina.
a.
int main(){
	
	int i =3; p=2;
	return i+3;
}
<main>
add %g0, 3, %l1;
add %g0, 2, %l2;
add %l1, 3, %O0;

op  rd     op3   Rs1  i ___8____  Rs2
10 10001 000000 00000 1 00000000 00011
10 10010 000000 00000 1 00000000 00010
10 01000 000000 10001 1 00000000 00011

b.
int main(){
	int p=3; x=1; z=4;
	int w=0; 
	w=(p+40)+(x-z);
	return 0; 
}
<main>
add %g0, 3, %l1;
add %g0, 1, %l2;
add %g0, 4, %l3;
add %g0, 0, %l4;

add %l1, 40, %l1;
sub %l2, %l3, %l2;
add %l1, %l2, %l4;
add %g0, 0, %O0;

op  rd     op3   Rs1  i ___8____  Rs2
10 10001 000000 00000 1 00000000 00011
10 10010 000000 00000 1 00000000 00001
10 10011 000000 00000 1 00000000 00100
10 10100 000000 00000 1 00000000 00000

10 10001 000000 10001 1 00000001 01000
10 10010 000100 10010 0 00000000 10011
10 10100 000000 10001 0 00000000 10010
10 01000 000000 00000 1 00000000 00000

6. Inicializar las siguientes variables negativas usando OR.

n=-12,
or %g0, -12, %L1;

a=-11,
or %g0, -11, %L2;

b=-14.
or %g0, -14, %L3;

	Ejemplo: recuerde que me confundi con respecto a 
	inicialización de una variable negativa, enmiendo mi error asi que les dejo
	un ejemplo de como se inializa una variable negativa.
	si tengo f=-10 entonces, en lenguaje de bajo nivel 
	add %go, -10, %l2
	or %g0, %l2, %O_1 y lo guardo como un porcentaje de salida ya sea O_0,
	lamento equivocarme, tratare de que no vuelva a suceder y si llega a suceder de nuevo,
	corregire rápidamente. el leguaje de máquina se hace de la manera como la veniamos trabajando
	Recuerden que SPark maneja solo 4 tipos de registro tipo i,l , o y g, de entrada, locales, salida y globales.



